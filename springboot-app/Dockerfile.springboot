# ===============================
# Etapa 1: Build del Node.js app
# ===============================
FROM node:22-alpine AS builder

# Crear usuario no root para el build
RUN addgroup -S builder && adduser -S builder -G builder
USER builder

# Definir directorio de trabajo
WORKDIR /home/builder/app

# Copiar archivos de dependencias (solo los que existan)
COPY --chown=builder:builder package*.json ./

# Crear y asignar permisos al cache de npm
RUN mkdir -p /home/builder/.npm && chown -R builder:builder /home/builder/.npm

# Configurar variable de entorno para npm
ENV NPM_CONFIG_CACHE=/home/builder/.npm
ENV NODE_ENV=production

# Instalar dependencias de producción
RUN npm ci --omit=dev --no-audit --no-fund

# Copiar el resto del código fuente
COPY --chown=builder:builder . .

# Compilar (si tu proyecto tiene build, por ejemplo NestJS o TS)
RUN npm run build

# ===============================
# Etapa 2: Runtime optimizado
# ===============================
FROM node:22-alpine AS runtime

# Instalar dependencias mínimas necesarias
RUN apk add --no-cache tini

# Crear usuario no root para ejecución
RUN addgroup -S app && adduser -S app -G app
USER app

# Definir directorio de trabajo
WORKDIR /app

# Copiar solo los archivos necesarios desde la etapa de build
COPY --from=builder --chown=app:app /home/builder/app/dist ./dist
COPY --from=builder --chown=app:app /home/builder/app/node_modules ./node_modules
COPY --from=builder --chown=app:app /home/builder/app/package*.json ./

# Configurar entorno
ENV NODE_ENV=production
ENV PORT=3000

# Exponer puerto y definir proceso principal
EXPOSE 3000
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "dist/main.js"]
