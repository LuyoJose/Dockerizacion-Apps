version: "3.9"

services:
  # üß† Redis
  redis:
    image: redis:7.4-alpine
    container_name: redis_service
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    restart: unless-stopped
    read_only: true
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./redis/users.acl:/usr/local/etc/redis/users.acl:ro
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-u", "redis://appuser:UltraSecurePassword123@localhost:6379", "ping"]
      interval: 15s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend

  # üóÑÔ∏è PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: postgres_service
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /var/run/postgresql
      - /tmp
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: AppUserPass123
      POSTGRES_DB: appdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 15s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend

  # üçÉ MongoDB
  mongo:
    image: mongo:7.0
    container_name: mongo_service
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "-u", "appuser", "-p", "AppUserPass123", "--authenticationDatabase", "appdb", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 15s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend

  # üîó Node.js API
  node-app:
    build:
      context: ./node-app
      dockerfile: Dockerfile.node
    container_name: node_app
    restart: unless-stopped
    read_only: true
    environment:
      NODE_ENV: production
      DATABASE_URL: "postgresql://appuser:AppUserPass123@postgres:5432/appdb"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend
      - frontend

  # üçÉ Spring Boot
  springboot-app:
    build:
      context: ./springboot-app
      dockerfile: Dockerfile.springboot
    container_name: springboot_service
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/appdb
      SPRING_DATASOURCE_USERNAME: appuser
      SPRING_DATASOURCE_PASSWORD: AppUserPass123
      SPRING_REDIS_HOST: redis
      SPRING_MONGO_URI: mongodb://appuser:AppUserPass123@mongo:27017/appdb
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Xmx512m"
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 1G
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend
      - frontend
      - monitoring

# üìä Prometheus
  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile.prometheus
    container_name: prometheus_service
    restart: unless-stopped
    read_only: true
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

  # üìà Grafana
  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile.grafana
    container_name: grafana_service
    restart: unless-stopped
    read_only: true
    ports:
      - "3010:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

  # üîÅ Watchtower (auto-updates)
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_LABEL_ENABLE: "true"
      WATCHTOWER_SCHEDULE: "0 0 * * *" # Ejecuta cada medianoche
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

# üîó Redes
networks:
  backend:
    #internal: true
  frontend:
  monitoring:
    #internal: true

# üíæ Vol√∫menes
volumes:
  redis_data:
  postgres_data:
  mongo_data:
  prometheus_data:
  grafana_data:

# üîê Secretos
secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt