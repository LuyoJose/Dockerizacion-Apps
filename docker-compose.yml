version: "3.9"

services:
  # üß† Redis
  redis:
    image: redis:8.2-alpine
    container_name: redis_service
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 3s
      retries: 3
    networks:
      - backend

  # üóÑÔ∏è PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres_service
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - backend

  # üçÉ MongoDB
  mongo:
    image: mongo:7.0
    container_name: mongo_service
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - backend

  # ‚ö° Node.js API
  node-app:
    build:
      context: ./node-app
      dockerfile: Dockerfile.node
    container_name: node_app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    networks:
      - backend
      - frontend

  # ‚òï Spring Boot
  springboot-app:
    build:
      context: ./springboot-app
      dockerfile: Dockerfile.springboot
    container_name: springboot_service
    restart: unless-stopped
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_MONGO_URI: mongodb://mongo:27017/app
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Xmx512m"
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - backend
      - frontend
      - monitoring

  # üìä Prometheus
  prometheus:
    build:
      context: ./prometheus
      dockerfile: Dockerfile.prometheus
    container_name: prometheus_service
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

  # üìà Grafana
  grafana:
    build:
      context: ./grafana
      dockerfile: Dockerfile.grafana
    container_name: grafana_service
    restart: unless-stopped
    ports:
      - "3010:3000"
    env_file:
      - .env
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - monitoring

# üîó Redes
networks:
  backend:
  frontend:
  monitoring:

# üíæ Vol√∫menes
volumes:
  redis_data:
  postgres_data:
  mongo_data:
  prometheus_data:
  grafana_data:
