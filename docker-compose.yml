services:
  # üß† Redis
  redis:
    image: redis:8.2-alpine
    container_name: redis_service
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 3s
      retries: 3
    networks:
      - backend

  # üóÑÔ∏è PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres_service
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-appdb}"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - backend

  # üçÉ MongoDB
  mongo:
    image: mongo:7.0
    container_name: mongo_service
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - backend

  # ‚ö° Node + TypeScript
  node-app:
    image: node:lts-slim
    container_name: node_service
    restart: always
    environment:
      NODE_ENV: production
      DATABASE_URL: "postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-appdb}"
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - postgres
      - redis
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 20s
      timeout: 3s
      retries: 3
    networks:
      - backend
      - frontend

  # ‚òï Spring Boot (Java)
  springboot-app:
    image: maven:3.9-eclipse-temurin-17
    container_name: springboot_service
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/${POSTGRES_DB:-appdb}"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-admin}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
      SPRING_REDIS_HOST: redis
      SPRING_MONGO_URI: "mongodb://mongo:27017/app"
    depends_on:
      - postgres
      - mongo
      - redis
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 20s
      timeout: 3s
      retries: 3
    networks:
      - backend
      - frontend

# Vol√∫menes persistentes
volumes:
  redis_data:
  postgres_data:
  mongo_data:

networks:
  backend:
    name: backend
    driver: bridge
  frontend:
    name: frontend
    driver: bridge