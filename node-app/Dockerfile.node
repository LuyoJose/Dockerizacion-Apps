# ======================================================
# üèóÔ∏è Etapa 1: Build del Node.js app (segura y reproducible)
# ======================================================
FROM node:22-alpine AS builder

# 1Ô∏è‚É£ Crear usuario no-root para el build
RUN addgroup -S builder && adduser -S builder -G builder

# 2Ô∏è‚É£ Preparar directorios con permisos correctos
RUN mkdir -p /home/builder/app /home/builder/.npm \
    && chown -R builder:builder /home/builder

# 3Ô∏è‚É£ Cambiar a usuario seguro
USER builder
WORKDIR /home/builder/app

# 4Ô∏è‚É£ Configurar cach√© npm aislado
ENV NPM_CONFIG_CACHE=/home/builder/.npm

# 5Ô∏è‚É£ Copiar solo dependencias primero (para cache)
COPY --chown=builder:builder package*.json ./

# 6Ô∏è‚É£ Instalar dependencias de producci√≥n (reproducible)
RUN npm ci --omit=dev --no-audit --no-fund

# 7Ô∏è‚É£ Copiar el resto del c√≥digo fuente
COPY --chown=builder:builder . .

# 8Ô∏è‚É£ Compilar la aplicaci√≥n (por ejemplo: NestJS, Next.js, etc.)
RUN npm run build

# 9Ô∏è‚É£ (Opcional) Generar checksum para verificaci√≥n posterior
RUN sha256sum package-lock.json > checksums.txt


# ======================================================
# üöÄ Etapa 2: Runtime optimizado y seguro
# ======================================================
FROM node:22-alpine AS runtime
# üëá Si quieres m√°s seguridad a√∫n, puedes cambiar a distroless:
# FROM gcr.io/distroless/nodejs22 AS runtime

# 10Ô∏è‚É£ Instalar tini para manejo correcto de se√±ales
RUN apk add --no-cache tini curl wget

# 11Ô∏è‚É£ Crear usuario no root para ejecuci√≥n
RUN addgroup -S app && adduser -S app -G app

# 12Ô∏è‚É£ Directorio limpio de ejecuci√≥n
WORKDIR /app

# 13Ô∏è‚É£ Copiar solo lo esencial del build
COPY --from=builder --chown=app:app /home/builder/app/dist ./dist
COPY --from=builder --chown=app:app /home/builder/app/node_modules ./node_modules
COPY --from=builder --chown=app:app /home/builder/app/package*.json ./
COPY --from=builder --chown=app:app /home/builder/app/checksums.txt ./

# 14Ô∏è‚É£ Verificaci√≥n opcional de integridad
RUN sha256sum -c checksums.txt || { echo "Checksum verification failed!"; exit 1; }

# 15Ô∏è‚É£ Endurecer permisos de ejecuci√≥n
RUN chmod -R 550 /app

# 16Ô∏è‚É£ Configuraci√≥n de entorno segura
ENV NODE_ENV=production \
    PORT=3000 \
    TZ=America/Lima \
    NODE_OPTIONS="--max-old-space-size=512 --enable-source-maps"

# üîí Ejecutar siempre como usuario no-root
USER app

# 17Ô∏è‚É£ Exponer puerto
EXPOSE 3000

# 18Ô∏è‚É£ HEALTHCHECK (verifica cada 30s si el servicio est√° activo)
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD wget -qO- http://localhost:3000/health || exit 1

# 19Ô∏è‚É£ Arranque con tini
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "dist/main.js"]

# 20Ô∏è‚É£ Metadata est√°ndar (para trazabilidad y observabilidad)
LABEL org.opencontainers.image.title="My Node.js App" \
    org.opencontainers.image.version="1.0.0" \
    org.opencontainers.image.authors="tucorreo@empresa.com" \
    org.opencontainers.image.description="Aplicaci√≥n Node.js productiva y segura" \
    org.opencontainers.image.vendor="TuEmpresa" \
    org.opencontainers.image.licenses="MIT"
