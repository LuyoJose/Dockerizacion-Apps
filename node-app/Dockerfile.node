# ======================================================
# üèóÔ∏è Etapa 1: Build del Node.js app (con TypeScript)
# ======================================================
FROM node:22-alpine AS builder

# Crear usuario y grupo
RUN addgroup -S builder && adduser -S builder -G builder

# Crear estructura de carpetas y dar permisos
RUN mkdir -p /home/builder/app /home/builder/.npm \
    && chown -R builder:builder /home/builder

# üëá Crear node_modules con permisos antes de cambiar de usuario
RUN mkdir -p /home/builder/app/node_modules && chmod -R 775 /home/builder/app

# Cambiar a usuario seguro despu√©s de configurar todo
USER builder
WORKDIR /home/builder/app

# Copiar dependencias
COPY --chown=builder:builder package*.json ./

# Instalar dependencias (incluye dev)
RUN npm ci --no-audit --no-fund

# Copiar el resto del c√≥digo
COPY --chown=builder:builder . .

# Compilar TypeScript ‚Üí genera /dist
RUN npm run build

# ======================================================
# üöÄ Etapa 2: Runtime optimizado
# ======================================================
FROM node:22-alpine AS runtime

RUN apk add --no-cache tini curl wget
RUN addgroup -S app && adduser -S app -G app
WORKDIR /app

# Copiar solo lo necesario del build
COPY --from=builder --chown=app:app /home/builder/app/dist ./dist
COPY --from=builder --chown=app:app /home/builder/app/package*.json ./
RUN npm ci --omit=dev --no-audit --no-fund

ENV NODE_ENV=production \
    PORT=3000 \
    TZ=America/Lima \
    NODE_OPTIONS="--max-old-space-size=512 --enable-source-maps"

USER app
EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD wget -qO- http://localhost:3000/health || exit 1

ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "dist/index.js"]
