# ===============================
# Etapa 1: Build del Node.js app
# ===============================
FROM node:22-alpine AS builder

# Crear usuario no root para el build
RUN addgroup -S builder && adduser -S builder -G builder

# Definir directorio de trabajo
WORKDIR /home/builder/app

# Copiar archivos de dependencias
COPY package*.json ./

# Crear cache de npm y dar permisos
RUN mkdir -p /home/builder/.npm && chown -R builder:builder /home/builder

# Configurar entorno npm
ENV NPM_CONFIG_CACHE=/home/builder/.npm
ENV NODE_ENV=production

# Cambiar a usuario seguro
USER builder

# Limpiar posibles permisos viejos y reinstalar
RUN npm cache clean --force || true

# Instalar dependencias sin auditorías
RUN npm ci --omit=dev --no-audit --no-fund

# Copiar el resto del código y compilar
COPY --chown=builder:builder . .
RUN npm run build

# ===============================
# Etapa 2: Runtime optimizado
# ===============================
FROM node:22-alpine AS runtime

RUN apk add --no-cache tini

# Crear usuario no root para ejecución
RUN addgroup -S app && adduser -S app -G app

WORKDIR /app

# Copiar los artefactos del build
COPY --from=builder --chown=app:app /home/builder/app/dist ./dist
COPY --from=builder --chown=app:app /home/builder/app/node_modules ./node_modules
COPY --from=builder --chown=app:app /home/builder/app/package*.json ./

ENV NODE_ENV=production
ENV PORT=3000

USER app

EXPOSE 3000
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "dist/main.js"]
